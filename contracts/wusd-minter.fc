#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/constants.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#include "imports/discovery-params.fc";
#pragma version >=0.2.0;

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_total_supply;
global slice ctx_admin_address;
global cell jetton_wallet_code;
global cell content;
global cell ctx_permissions;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_total_supply = ds~load_coins();
    ctx_admin_address = ds~load_msg_addr();
    content = ds~load_ref();
    jetton_wallet_code = ds~load_ref();
    ctx_permissions = ds~load_ref();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_coins(ctx_total_supply)
            .store_slice(ctx_admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .store_ref(ctx_permissions)
            .end_cell()
    );
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() burn_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg);

    send_raw_message(msg.end_cell(), 1);

}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    slice permission_cs = ctx_permissions.begin_parse();
    cell ctx_minter_dict = permission_cs~load_dict();
    cell ctx_burner_dict = permission_cs~load_dict();
    cell ctx_admin_dict = permission_cs~load_dict();
    cell ctx_recover_dict = permission_cs~load_dict();

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    if (op == op::mint()) {
        slice sender_address = cs~load_msg_addr();
        int hash = sender_address.slice_hash();

        throw_unless(76, ctx_minter_dict.dict_contains?(256, hash));
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int jetton_amount = master_msg_cs~load_coins();
        mint_tokens(to_address, jetton_wallet_code, amount, master_msg);
        ctx_total_supply += jetton_amount;
        save_data();
        return ();
    }
    ;; this method only can burn the admin_wallet balance
    if (op == op::burn()) {

        slice sender_address = cs~load_msg_addr();
        int hash = sender_address.slice_hash();

        throw_unless(74, ctx_burner_dict.dict_contains?(256, hash));

        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int jetton_amount = master_msg_cs~load_coins();
        burn_tokens(ctx_admin_address, jetton_wallet_code, amount, master_msg);

        ctx_total_supply -= jetton_amount;
        save_data();
        return ();
    }

    ;; this method can burn all the wallet balance to deal with the attacks from hackers
    if (op == op::recover()) {
        slice sender_address = cs~load_msg_addr();
        int hash = sender_address.slice_hash();

        throw_unless(77, ctx_recover_dict.dict_contains?(256, hash));

        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int jetton_amount = master_msg_cs~load_coins();

        burn_tokens(to_address, jetton_wallet_code, amount, master_msg);

        ctx_total_supply -= jetton_amount;
        save_data();
        return ();
    }

    if (op == op::provide_wallet_address()) {
        int fwd_fee = in_msg_body~load_coins();
        slice sender_address = cs~load_msg_addr();

        throw_unless(75, msg_value > fwd_fee + provide_address_gas_consumption());

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
        ? begin_cell().store_slice(owner_address).end_cell()
        : null();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::take_wallet_address(), 32)
            .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);
        return ();
    }

    if (op == op::change_admin()) {
        ;; change admin
        slice sender_address = cs~load_msg_addr();
        int hash = sender_address.slice_hash();

        throw_unless(73, equal_slices(sender_address, ctx_admin_address) | ctx_admin_dict.dict_contains?(256,hash));

        slice new_admin_address = in_msg_body~load_msg_addr();
        ctx_admin_address = new_admin_address;
        save_data();
        return ();
    }

    if (op == op::change_content()) {
        ;; change content, delete this for immutable tokens
        slice sender_address = in_msg_body~load_msg_addr();
        int hash = sender_address.slice_hash();
        throw_unless(73, equal_slices(sender_address, ctx_admin_address) | ctx_admin_dict.dict_contains?(256,hash));
        content = in_msg_body~load_ref();
        save_data();
        return ();
    }

    if (op == op::grant_role()) {
        slice sender_address = cs~load_msg_addr();
        int adminHash = sender_address.slice_hash();
        throw_unless(73, equal_slices(sender_address, ctx_admin_address) | ctx_admin_dict.dict_contains?(256,adminHash));

        slice new_role_address = in_msg_body~load_msg_addr();
        int child_op = in_msg_body~load_uint(32);

        int hash = new_role_address.slice_hash();
        slice empty = begin_cell().end_cell().begin_parse();

        if (child_op == op::grant_minter()) {
            ctx_minter_dict = ctx_minter_dict.udict_set(256, hash, empty);
        } elseif (child_op == op::grant_burner()) {
            ctx_burner_dict = ctx_burner_dict.udict_set(256, hash, empty);
        } elseif (child_op == op::grant_admin()) {
            ctx_admin_dict = ctx_admin_dict.udict_set(256, hash, empty);
        } elseif (child_op == op::grant_recover()) {
            ctx_recover_dict = ctx_recover_dict.udict_set(256, hash, empty);
        }

        ctx_permissions = begin_cell()
            .store_dict(ctx_minter_dict).store_dict(ctx_burner_dict).store_dict(ctx_admin_dict).store_dict(ctx_recover_dict).end_cell();
        save_data();


        return ();
    }

    if (op == op::remove_role()) {
        slice sender_address = cs~load_msg_addr();
        int adminHash = sender_address.slice_hash();
        throw_unless(73, equal_slices(sender_address, ctx_admin_address) | ctx_admin_dict.dict_contains?(256,adminHash));

        slice remove_role_address = in_msg_body~load_msg_addr();
        int child_op = in_msg_body~load_uint(32);

        int hash = remove_role_address.slice_hash();
        if (child_op == op::remove_minter()) {
            (ctx_minter_dict, int flag) = ctx_minter_dict.udict_delete?(256, hash);
        } elseif (child_op == op::remove_burner()) {
            (ctx_burner_dict, int flag) = ctx_burner_dict.udict_delete?(256, hash);
        } elseif (child_op == op::remove_admin()) {
            (ctx_admin_dict, int flag) = ctx_admin_dict.udict_delete?(256, hash);
        } elseif (child_op == op::remove_recover()) {
            (ctx_recover_dict, int flag) = ctx_recover_dict.udict_delete?(256, hash);
        }

        ctx_permissions = begin_cell()
            .store_dict(ctx_minter_dict).store_dict(ctx_burner_dict).store_dict(ctx_admin_dict).store_dict(ctx_recover_dict).end_cell();
        save_data();

        return ();
    }

    if (op == op::upgrade()) {
        slice sender_address = cs~load_msg_addr();
        int adminHash = sender_address.slice_hash();
        throw_unless(73, equal_slices(sender_address, ctx_admin_address) | ctx_admin_dict.dict_contains?(256,adminHash));
        (cell new_data, cell new_code) = (in_msg_body~load_ref(), in_msg_body~load_ref());
        in_msg_body.end_parse();
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}



;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts


int get_total_supply() method_id {
    load_data();
    return ctx_total_supply;
}

slice get_admin_address() method_id {
    load_data();
    return ctx_admin_address;
}

slice get_wallet_address(slice owner_address) method_id {
    load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

(int, slice, cell, cell) get_jetton_data() method_id {
    load_data();
    return (ctx_total_supply, ctx_admin_address, content, jetton_wallet_code);
}
